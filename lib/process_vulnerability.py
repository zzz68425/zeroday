# 抓單一頁面資料
from bs4 import BeautifulSoup
from datetime import datetime
from urlextract import URLExtract
from urllib.parse import urlparse
import requests
import re
from lib.logger_utils import logger
from lib.db.db import SessionLocal
from lib.db.models import Incident, Vulnerability, Target, Institution, Category, Severity
from lib.zeroday_scraper import HEADERS, query_tanet_whois
from pydantic import ValidationError, AnyUrl, RootModel

session = SessionLocal()

def process_vulnerability(zdid, category_1_ids=None):
    if category_1_ids is None:
        category_1_ids = []

    if session.query(Incident).filter_by(id=zdid).first():
        print(f"{zdid} 已存在，跳過")
        return "exists"

    url = f"https://r.jina.ai/https://zeroday.hitcon.org/vulnerability/{zdid}"
    res = requests.get(url, headers=HEADERS, timeout=60)
    soup = BeautifulSoup(res.text, "html.parser")

    severity_map = {"無": 1, "低": 2, "中": 3, "高": 4, "嚴重": 5}

    vendor = soup.select_one("span.value.tx-overflow-ellipsis")
    severity_raw = soup.find("li", string=re.compile("風險："))
    vuln_name_raw = soup.find("li", string=re.compile("類型："))
    log_dates = [tag.get_text(strip=True).replace("/", "-") for tag in soup.select(".log-date")]

    vendor = vendor.text.strip() if vendor else None
    severity = severity_raw.get_text(strip=True).split("：")[1] if severity_raw else None
    severity_sn = severity_map.get(severity)
    vuln_name = vuln_name_raw.get_text(strip=True).split("：")[1] if vuln_name_raw else None

    when_start = when_ended = None
    if log_dates:
        parsed_dates = sorted([datetime.strptime(d, "%Y-%m-%d %H:%M:%S") for d in log_dates])
        when_start = parsed_dates[0]
        when_ended = parsed_dates[-1] if len(parsed_dates) > 1 else when_start

    # 敘述
    vuln_desc = "（無資料）"
    for key in ["參考資料", "敘述"]:
        section = soup.find("h3", string=key)
        if section:
            for sib in section.find_next_siblings():
                if sib.name == "h3":
                    break
                inner_div = sib.find("div")
                if inner_div:
                    for elem in inner_div.children:
                        if elem.name == "br":
                            break
                        if isinstance(elem, str):
                            vuln_desc = elem.strip()
                            break
                    break
            break

    # vulnerability 查或寫
    vuln = session.query(Vulnerability).filter_by(name=vuln_name, description=vuln_desc).first()
    if not vuln:
        vuln = Vulnerability(name=vuln_name, description=vuln_desc)
        session.add(vuln)
        try:
            session.commit()
        except Exception as e:
            session.rollback()
            raise RuntimeError(f"{zdid} 寫入 vulnerability 失敗：{e}")

    # incident 寫入
    if zdid and vendor and severity_sn and vuln.sn and when_start:
        incident = Incident(
            id=zdid,
            vendor=vendor,
            severity_sn=severity_sn,
            vulnerability_sn=vuln.sn,
            when_start=when_start,
            when_ended=when_ended
        )
        session.add(incident)
        try:
            session.commit()
            logger.info(f"{zdid} 寫入 incident 完成")
        except Exception as e:
            session.rollback()
            raise RuntimeError(f"{zdid} 寫入 incident 失敗：{e}")
    else:
        raise ValueError(f"{zdid} incident 資料不完整")

    # hostname & target
    urls_block = soup.select_one("div.urls")
    hostname = None

    if urls_block:
        url_text = urls_block.get_text()
        
        extractor = URLExtract()
        url_candidates = extractor.find_urls(url_text)
        
        for u in url_candidates:
            # 提取域名部分
            if "://" in u:
                domain = urlparse(u).netloc.split(':')[0]
            else:
                domain = u.split(':')[0]
                
            if domain:  # 確保域名不為空
                try:
                    web = RootModel[AnyUrl].model_validate("http://" + domain)
                    hostname = web.root.host
                    break
                except ValidationError:
                    continue
    
        if hostname:
            institution_sn = None
            category_sn = 7
            name_override = None
            whois_domain = None

            if re.match(r"\d+\.\d+\.\d+\.\d+", hostname):
                inst_name, whois_domain = query_tanet_whois(hostname)
                if whois_domain and whois_domain.endswith("edu.tw"):
                    category_sn = 1
                    if zdid not in category_1_ids:
                        category_1_ids.append(zdid)
                    institutions = session.query(Institution).filter(Institution.domain_name.isnot(None)).all()
                    for inst in institutions:
                        if whois_domain.endswith(inst.domain_name):
                            institution_sn = inst.sn
                            break
                if inst_name and not whois_domain:
                    name_override = inst_name
                    category_sn = 1
                    if zdid not in category_1_ids:
                        category_1_ids.append(zdid)
            else:
                institutions = session.query(Institution).filter(Institution.domain_name.isnot(None)).all()
                for inst in institutions:
                    if hostname.endswith(inst.domain_name):
                        institution_sn = inst.sn
                        break
                categories = session.query(Category).filter(Category.domain_name.isnot(None)).all()
                for cat in categories:
                    if cat.domain_name in hostname:
                        category_sn = cat.sn
                        if category_sn == 1 and zdid not in category_1_ids:
                            category_1_ids.append(zdid)
                        break

            target_exists = session.query(Target).filter_by(hostname=hostname, incident_sn=incident.sn).first()
            if not target_exists:
                target = Target(
                    hostname=hostname,
                    category_sn=category_sn,
                    incident_sn=incident.sn,
                    institution_sn=institution_sn,
                    name=name_override
                )
                session.add(target)
                session.commit()
                logger.info(f"{zdid} 寫入 target：{hostname}")
        else:
            logger.warning(f"{zdid} 無法擷取有效 hostname，略過 target 寫入")
    else:
        logger.warning(f"{zdid} 無法擷取有效 hostname，略過 target 寫入")
    return "ok"
